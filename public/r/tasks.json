{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tasks",
  "type": "registry:page",
  "title": "Tasks",
  "dependencies": [
    "@tanstack/react-table",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-checkbox",
    "lucide-react",
    "zod",
    "@radix-ui/react-dropdown-menu",
    "cmdk",
    "@radix-ui/react-dialog",
    "@radix-ui/react-popover",
    "@radix-ui/react-separator",
    "@radix-ui/react-select",
    "@radix-ui/react-avatar",
    "fs",
    "path",
    "@faker-js/faker"
  ],
  "registryDependencies": [
    "badge",
    "checkbox",
    "button",
    "dropdown-menu",
    "command",
    "popover",
    "separator",
    "select",
    "input",
    "table",
    "avatar"
  ],
  "files": [
    {
      "path": "examples/tasks/components/columns.tsx",
      "content": "\"use client\";\n\nimport { ColumnDef } from \"@tanstack/react-table\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nimport { labels, priorities, statuses } from \"../data/data\";\nimport { Task } from \"../data/schema\";\nimport { DataTableColumnHeader } from \"./data-table-column-header\";\nimport { DataTableRowActions } from \"./data-table-row-actions\";\n\nexport const columns: ColumnDef<Task>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: \"id\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Task\" />,\n    cell: ({ row }) => <div className=\"w-[80px]\">{row.getValue(\"id\")}</div>,\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: \"title\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Title\" />,\n    cell: ({ row }) => {\n      const label = labels.find((label) => label.value === row.original.label);\n\n      return (\n        <div className=\"flex gap-2\">\n          {label && <Badge variant=\"outline\">{label.label}</Badge>}\n          <span className=\"max-w-[500px] truncate font-medium\">{row.getValue(\"title\")}</span>\n        </div>\n      );\n    }\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n    cell: ({ row }) => {\n      const status = statuses.find((status) => status.value === row.getValue(\"status\"));\n\n      if (!status) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex w-[100px] items-center gap-2\">\n          {status.icon && <status.icon className=\"text-muted-foreground size-4\" />}\n          <span>{status.label}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    }\n  },\n  {\n    accessorKey: \"priority\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Priority\" />,\n    cell: ({ row }) => {\n      const priority = priorities.find((priority) => priority.value === row.getValue(\"priority\"));\n\n      if (!priority) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex items-center gap-2\">\n          {priority.icon && <priority.icon className=\"text-muted-foreground size-4\" />}\n          <span>{priority.label}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    }\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => <DataTableRowActions row={row} />\n  }\n];\n",
      "type": "registry:component",
      "target": "components/tasks/components/columns.tsx"
    },
    {
      "path": "examples/tasks/components/data-table-column-header.tsx",
      "content": "import { Column } from \"@tanstack/react-table\";\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\n\ninterface DataTableColumnHeaderProps<TData, TValue> extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title: string;\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\" className=\"data-[state=open]:bg-accent -ml-3 h-8\">\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDown />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUp />\n            ) : (\n              <ChevronsUpDown />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUp />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDown />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeOff />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/components/data-table-column-header.tsx"
    },
    {
      "path": "examples/tasks/components/data-table-faceted-filter.tsx",
      "content": "import * as React from \"react\";\nimport { Column } from \"@tanstack/react-table\";\nimport { Check, PlusCircle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator\n} from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface DataTableFacetedFilterProps<TData, TValue> {\n  column?: Column<TData, TValue>;\n  title?: string;\n  options: {\n    label: string;\n    value: string;\n    icon?: React.ComponentType<{ className?: string }>;\n  }[];\n}\n\nexport function DataTableFacetedFilter<TData, TValue>({\n  column,\n  title,\n  options\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const facets = column?.getFacetedUniqueValues();\n  const selectedValues = new Set(column?.getFilterValue() as string[]);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 border-dashed\">\n          <PlusCircle />\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\n              <Badge variant=\"secondary\" className=\"rounded-sm px-1 font-normal lg:hidden\">\n                {selectedValues.size}\n              </Badge>\n              <div className=\"hidden gap-1 lg:flex\">\n                {selectedValues.size > 2 ? (\n                  <Badge variant=\"secondary\" className=\"rounded-sm px-1 font-normal\">\n                    {selectedValues.size} selected\n                  </Badge>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        variant=\"secondary\"\n                        key={option.value}\n                        className=\"rounded-sm px-1 font-normal\">\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList>\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => {\n                const isSelected = selectedValues.has(option.value);\n                return (\n                  <CommandItem\n                    key={option.value}\n                    onSelect={() => {\n                      if (isSelected) {\n                        selectedValues.delete(option.value);\n                      } else {\n                        selectedValues.add(option.value);\n                      }\n                      const filterValues = Array.from(selectedValues);\n                      column?.setFilterValue(filterValues.length ? filterValues : undefined);\n                    }}>\n                    <div\n                      className={cn(\n                        \"flex size-4 items-center justify-center rounded-[4px] border\",\n                        isSelected\n                          ? \"bg-primary border-primary text-primary-foreground\"\n                          : \"border-input [&_svg]:invisible\"\n                      )}>\n                      <Check className=\"text-primary-foreground size-3.5\" />\n                    </div>\n                    {option.icon && <option.icon className=\"text-muted-foreground size-4\" />}\n                    <span>{option.label}</span>\n                    {facets?.get(option.value) && (\n                      <span className=\"text-muted-foreground ml-auto flex size-4 items-center justify-center font-mono text-xs\">\n                        {facets.get(option.value)}\n                      </span>\n                    )}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={() => column?.setFilterValue(undefined)}\n                    className=\"justify-center text-center\">\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/components/data-table-faceted-filter.tsx"
    },
    {
      "path": "examples/tasks/components/data-table-pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\";\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTablePagination<TData>({ table }: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2\">\n      <div className=\"text-muted-foreground flex-1 text-sm\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}>\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 25, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}>\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}>\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}>\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}>\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/components/data-table-pagination.tsx"
    },
    {
      "path": "examples/tasks/components/data-table-row-actions.tsx",
      "content": "\"use client\";\n\nimport { Row } from \"@tanstack/react-table\";\nimport { MoreHorizontal } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\n\nimport { labels } from \"../data/data\";\nimport { taskSchema } from \"../data/schema\";\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n}\n\nexport function DataTableRowActions<TData>({ row }: DataTableRowActionsProps<TData>) {\n  const task = taskSchema.parse(row.original);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"data-[state=open]:bg-muted size-8\">\n          <MoreHorizontal />\n          <span className=\"sr-only\">Open menu</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n        <DropdownMenuItem>Edit</DropdownMenuItem>\n        <DropdownMenuItem>Make a copy</DropdownMenuItem>\n        <DropdownMenuItem>Favorite</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger>Labels</DropdownMenuSubTrigger>\n          <DropdownMenuSubContent>\n            <DropdownMenuRadioGroup value={task.label}>\n              {labels.map((label) => (\n                <DropdownMenuRadioItem key={label.value} value={label.value}>\n                  {label.label}\n                </DropdownMenuRadioItem>\n              ))}\n            </DropdownMenuRadioGroup>\n          </DropdownMenuSubContent>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem variant=\"destructive\">\n          Delete\n          <DropdownMenuShortcut>⌘⌫</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/components/data-table-row-actions.tsx"
    },
    {
      "path": "examples/tasks/components/data-table-toolbar.tsx",
      "content": "\"use client\";\n\nimport { Table } from \"@tanstack/react-table\";\nimport { X } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTableViewOptions } from \"./data-table-view-options\";\n\nimport { priorities, statuses } from \"../data/data\";\nimport { DataTableFacetedFilter } from \"./data-table-faceted-filter\";\n\ninterface DataTableToolbarProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTableToolbar<TData>({ table }: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0;\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex flex-1 items-center gap-2\">\n        <Input\n          placeholder=\"Filter tasks...\"\n          value={(table.getColumn(\"title\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) => table.getColumn(\"title\")?.setFilterValue(event.target.value)}\n          className=\"h-8 w-[150px] lg:w-[250px]\"\n        />\n        {table.getColumn(\"status\") && (\n          <DataTableFacetedFilter\n            column={table.getColumn(\"status\")}\n            title=\"Status\"\n            options={statuses}\n          />\n        )}\n        {table.getColumn(\"priority\") && (\n          <DataTableFacetedFilter\n            column={table.getColumn(\"priority\")}\n            title=\"Priority\"\n            options={priorities}\n          />\n        )}\n        {isFiltered && (\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => table.resetColumnFilters()}>\n            Reset\n            <X />\n          </Button>\n        )}\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <DataTableViewOptions table={table} />\n        <Button size=\"sm\">Add Task</Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/components/data-table-toolbar.tsx"
    },
    {
      "path": "examples/tasks/components/data-table-view-options.tsx",
      "content": "\"use client\";\n\nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\";\nimport { Table } from \"@tanstack/react-table\";\nimport { Settings2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator\n} from \"@/components/ui/dropdown-menu\";\n\nexport function DataTableViewOptions<TData>({ table }: { table: Table<TData> }) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"ml-auto hidden h-8 lg:flex\">\n          <Settings2 />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter((column) => typeof column.accessorFn !== \"undefined\" && column.getCanHide())\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                key={column.id}\n                className=\"capitalize\"\n                checked={column.getIsVisible()}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}>\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            );\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/components/data-table-view-options.tsx"
    },
    {
      "path": "examples/tasks/components/data-table.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable,\n  VisibilityState\n} from \"@tanstack/react-table\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from \"@/components/ui/table\";\n\nimport { DataTablePagination } from \"./data-table-pagination\";\nimport { DataTableToolbar } from \"./data-table-toolbar\";\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n}\n\nexport function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters\n    },\n    initialState: {\n      pagination: {\n        pageSize: 10\n      }\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues()\n  });\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <DataTableToolbar table={table} />\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id} colSpan={header.colSpan}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination table={table} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/components/data-table.tsx"
    },
    {
      "path": "examples/tasks/components/user-nav.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\n\nexport function UserNav() {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-9 w-9\">\n            <AvatarImage src=\"/avatars/03.png\" alt=\"@shadcn\" />\n            <AvatarFallback>SC</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm leading-none font-medium\">shadcn</p>\n            <p className=\"text-muted-foreground text-xs leading-none\">m@example.com</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem>\n            Profile\n            <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Billing\n            <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Settings\n            <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>New Team</DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          Log out\n          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/components/user-nav.tsx"
    },
    {
      "path": "examples/tasks/data/data.tsx",
      "content": "import {\r\n  ArrowDown,\r\n  ArrowRight,\r\n  ArrowUp,\r\n  CheckCircle,\r\n  Circle,\r\n  CircleOff,\r\n  HelpCircle,\r\n  Timer,\r\n} from \"lucide-react\"\r\n\r\nexport const labels = [\r\n  {\r\n    value: \"bug\",\r\n    label: \"Bug\",\r\n  },\r\n  {\r\n    value: \"feature\",\r\n    label: \"Feature\",\r\n  },\r\n  {\r\n    value: \"documentation\",\r\n    label: \"Documentation\",\r\n  },\r\n]\r\n\r\nexport const statuses = [\r\n  {\r\n    value: \"backlog\",\r\n    label: \"Backlog\",\r\n    icon: HelpCircle,\r\n  },\r\n  {\r\n    value: \"todo\",\r\n    label: \"Todo\",\r\n    icon: Circle,\r\n  },\r\n  {\r\n    value: \"in progress\",\r\n    label: \"In Progress\",\r\n    icon: Timer,\r\n  },\r\n  {\r\n    value: \"done\",\r\n    label: \"Done\",\r\n    icon: CheckCircle,\r\n  },\r\n  {\r\n    value: \"canceled\",\r\n    label: \"Canceled\",\r\n    icon: CircleOff,\r\n  },\r\n]\r\n\r\nexport const priorities = [\r\n  {\r\n    label: \"Low\",\r\n    value: \"low\",\r\n    icon: ArrowDown,\r\n  },\r\n  {\r\n    label: \"Medium\",\r\n    value: \"medium\",\r\n    icon: ArrowRight,\r\n  },\r\n  {\r\n    label: \"High\",\r\n    value: \"high\",\r\n    icon: ArrowUp,\r\n  },\r\n]\r\n",
      "type": "registry:component",
      "target": "components/tasks/data/data.tsx"
    },
    {
      "path": "examples/tasks/data/schema.ts",
      "content": "import { z } from \"zod\"\r\n\r\n// We're keeping a simple non-relational schema here.\r\n// IRL, you will have a schema for your data models.\r\nexport const taskSchema = z.object({\r\n  id: z.string(),\r\n  title: z.string(),\r\n  status: z.string(),\r\n  label: z.string(),\r\n  priority: z.string(),\r\n})\r\n\r\nexport type Task = z.infer<typeof taskSchema>\r\n",
      "type": "registry:component",
      "target": "components/tasks/data/schema.ts"
    },
    {
      "path": "examples/tasks/data/seed.ts",
      "content": "import fs from \"fs\"\r\nimport path from \"path\"\r\nimport { faker } from \"@faker-js/faker\"\r\n\r\nimport { labels, priorities, statuses } from \"./data\"\r\n\r\nconst tasks = Array.from({ length: 100 }, () => ({\r\n  id: `TASK-${faker.number.int({ min: 1000, max: 9999 })}`,\r\n  title: faker.hacker.phrase().replace(/^./, (letter) => letter.toUpperCase()),\r\n  status: faker.helpers.arrayElement(statuses).value,\r\n  label: faker.helpers.arrayElement(labels).value,\r\n  priority: faker.helpers.arrayElement(priorities).value,\r\n}))\r\n\r\nfs.writeFileSync(\r\n  path.join(__dirname, \"tasks.json\"),\r\n  JSON.stringify(tasks, null, 2)\r\n)\r\n\r\nconsole.log(\"✅ Tasks data generated.\")\r\n",
      "type": "registry:component",
      "target": "components/tasks/data/seed.ts"
    },
    {
      "path": "examples/tasks/data/tasks.json",
      "content": "[\r\n  {\r\n    \"id\": \"TASK-8782\",\r\n    \"title\": \"You can't compress the program without quantifying the open-source SSD pixel!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7878\",\r\n    \"title\": \"Try to calculate the EXE feed, maybe it will index the multi-byte pixel!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7839\",\r\n    \"title\": \"We need to bypass the neural TCP card!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5562\",\r\n    \"title\": \"The SAS interface is down, bypass the open-source pixel so we can back up the PNG bandwidth!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-8686\",\r\n    \"title\": \"I'll parse the wireless SSL protocol, that should driver the API panel!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1280\",\r\n    \"title\": \"Use the digital TLS panel, then you can transmit the haptic system!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7262\",\r\n    \"title\": \"The UTF8 application is down, parse the neural bandwidth so we can back up the PNG firewall!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1138\",\r\n    \"title\": \"Generating the driver won't do anything, we need to quantify the 1080p SMTP bandwidth!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7184\",\r\n    \"title\": \"We need to program the back-end THX pixel!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5160\",\r\n    \"title\": \"Calculating the bus won't do anything, we need to navigate the back-end JSON protocol!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5618\",\r\n    \"title\": \"Generating the driver won't do anything, we need to index the online SSL application!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6699\",\r\n    \"title\": \"I'll transmit the wireless JBOD capacitor, that should hard drive the SSD feed!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-2858\",\r\n    \"title\": \"We need to override the online UDP bus!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9864\",\r\n    \"title\": \"I'll reboot the 1080p FTP panel, that should matrix the HEX hard drive!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-8404\",\r\n    \"title\": \"We need to generate the virtual HEX alarm!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5365\",\r\n    \"title\": \"Backing up the pixel won't do anything, we need to transmit the primary IB array!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1780\",\r\n    \"title\": \"The CSS feed is down, index the bluetooth transmitter so we can compress the CLI protocol!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6938\",\r\n    \"title\": \"Use the redundant SCSI application, then you can hack the optical alarm!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9885\",\r\n    \"title\": \"We need to compress the auxiliary VGA driver!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3216\",\r\n    \"title\": \"Transmitting the transmitter won't do anything, we need to compress the virtual HDD sensor!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9285\",\r\n    \"title\": \"The IP monitor is down, copy the haptic alarm so we can generate the HTTP transmitter!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1024\",\r\n    \"title\": \"Overriding the microchip won't do anything, we need to transmit the digital OCR transmitter!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7068\",\r\n    \"title\": \"You can't generate the capacitor without indexing the wireless HEX pixel!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6502\",\r\n    \"title\": \"Navigating the microchip won't do anything, we need to bypass the back-end SQL bus!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5326\",\r\n    \"title\": \"We need to hack the redundant UTF8 transmitter!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6274\",\r\n    \"title\": \"Use the virtual PCI circuit, then you can parse the bluetooth alarm!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1571\",\r\n    \"title\": \"I'll input the neural DRAM circuit, that should protocol the SMTP interface!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9518\",\r\n    \"title\": \"Compressing the interface won't do anything, we need to compress the online SDD matrix!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5581\",\r\n    \"title\": \"I'll synthesize the digital COM pixel, that should transmitter the UTF8 protocol!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-2197\",\r\n    \"title\": \"Parsing the feed won't do anything, we need to copy the bluetooth DRAM bus!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-8484\",\r\n    \"title\": \"We need to parse the solid state UDP firewall!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9892\",\r\n    \"title\": \"If we back up the application, we can get to the UDP application through the multi-byte THX capacitor!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9616\",\r\n    \"title\": \"We need to synthesize the cross-platform ASCII pixel!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9744\",\r\n    \"title\": \"Use the back-end IP card, then you can input the solid state hard drive!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1376\",\r\n    \"title\": \"Generating the alarm won't do anything, we need to generate the mobile IP capacitor!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7382\",\r\n    \"title\": \"If we back up the firewall, we can get to the RAM alarm through the primary UTF8 pixel!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-2290\",\r\n    \"title\": \"I'll compress the virtual JSON panel, that should application the UTF8 bus!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1533\",\r\n    \"title\": \"You can't input the firewall without overriding the wireless TCP firewall!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4920\",\r\n    \"title\": \"Bypassing the hard drive won't do anything, we need to input the bluetooth JSON program!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5168\",\r\n    \"title\": \"If we synthesize the bus, we can get to the IP panel through the virtual TLS array!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7103\",\r\n    \"title\": \"We need to parse the multi-byte EXE bandwidth!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4314\",\r\n    \"title\": \"If we compress the program, we can get to the XML alarm through the multi-byte COM matrix!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3415\",\r\n    \"title\": \"Use the cross-platform XML application, then you can quantify the solid state feed!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-8339\",\r\n    \"title\": \"Try to calculate the DNS interface, maybe it will input the bluetooth capacitor!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6995\",\r\n    \"title\": \"Try to hack the XSS bandwidth, maybe it will override the bluetooth matrix!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-8053\",\r\n    \"title\": \"If we connect the program, we can get to the UTF8 matrix through the digital UDP protocol!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4336\",\r\n    \"title\": \"If we synthesize the microchip, we can get to the SAS sensor through the optical UDP program!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-8790\",\r\n    \"title\": \"I'll back up the optical COM alarm, that should alarm the RSS capacitor!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-8980\",\r\n    \"title\": \"Try to navigate the SQL transmitter, maybe it will back up the virtual firewall!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7342\",\r\n    \"title\": \"Use the neural CLI card, then you can parse the online port!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5608\",\r\n    \"title\": \"I'll hack the haptic SSL program, that should bus the UDP transmitter!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1606\",\r\n    \"title\": \"I'll generate the bluetooth PNG firewall, that should pixel the SSL driver!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7872\",\r\n    \"title\": \"Transmitting the circuit won't do anything, we need to reboot the 1080p RSS monitor!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4167\",\r\n    \"title\": \"Use the cross-platform SMS circuit, then you can synthesize the optical feed!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9581\",\r\n    \"title\": \"You can't index the port without hacking the cross-platform XSS monitor!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-8806\",\r\n    \"title\": \"We need to bypass the back-end SSL panel!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6542\",\r\n    \"title\": \"Try to quantify the RSS firewall, maybe it will quantify the open-source system!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6806\",\r\n    \"title\": \"The VGA protocol is down, reboot the back-end matrix so we can parse the CSS panel!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9549\",\r\n    \"title\": \"You can't bypass the bus without connecting the neural JBOD bus!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1075\",\r\n    \"title\": \"Backing up the driver won't do anything, we need to parse the redundant RAM pixel!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1427\",\r\n    \"title\": \"Use the auxiliary PCI circuit, then you can calculate the cross-platform interface!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1907\",\r\n    \"title\": \"Hacking the circuit won't do anything, we need to back up the online DRAM system!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4309\",\r\n    \"title\": \"If we generate the system, we can get to the TCP sensor through the optical GB pixel!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3973\",\r\n    \"title\": \"I'll parse the back-end ADP array, that should bandwidth the RSS bandwidth!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7962\",\r\n    \"title\": \"Use the wireless RAM program, then you can hack the cross-platform feed!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3360\",\r\n    \"title\": \"You can't quantify the program without synthesizing the neural OCR interface!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9887\",\r\n    \"title\": \"Use the auxiliary ASCII sensor, then you can connect the solid state port!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3649\",\r\n    \"title\": \"I'll input the virtual USB system, that should circuit the DNS monitor!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3586\",\r\n    \"title\": \"If we quantify the circuit, we can get to the CLI feed through the mobile SMS hard drive!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5150\",\r\n    \"title\": \"I'll hack the wireless XSS port, that should transmitter the IP interface!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3652\",\r\n    \"title\": \"The SQL interface is down, override the optical bus so we can program the ASCII interface!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6884\",\r\n    \"title\": \"Use the digital PCI circuit, then you can synthesize the multi-byte microchip!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1591\",\r\n    \"title\": \"We need to connect the mobile XSS driver!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3802\",\r\n    \"title\": \"Try to override the ASCII protocol, maybe it will parse the virtual matrix!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7253\",\r\n    \"title\": \"Programming the capacitor won't do anything, we need to bypass the neural IB hard drive!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9739\",\r\n    \"title\": \"We need to hack the multi-byte HDD bus!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4424\",\r\n    \"title\": \"Try to hack the HEX alarm, maybe it will connect the optical pixel!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3922\",\r\n    \"title\": \"You can't back up the capacitor without generating the wireless PCI program!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4921\",\r\n    \"title\": \"I'll index the open-source IP feed, that should system the GB application!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5814\",\r\n    \"title\": \"We need to calculate the 1080p AGP feed!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-2645\",\r\n    \"title\": \"Synthesizing the system won't do anything, we need to navigate the multi-byte HDD firewall!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4535\",\r\n    \"title\": \"Try to copy the JSON circuit, maybe it will connect the wireless feed!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4463\",\r\n    \"title\": \"We need to copy the solid state AGP monitor!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9745\",\r\n    \"title\": \"If we connect the protocol, we can get to the GB system through the bluetooth PCI microchip!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-2080\",\r\n    \"title\": \"If we input the bus, we can get to the RAM matrix through the auxiliary RAM card!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3838\",\r\n    \"title\": \"I'll bypass the online TCP application, that should panel the AGP system!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-1340\",\r\n    \"title\": \"We need to navigate the virtual PNG circuit!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6665\",\r\n    \"title\": \"If we parse the monitor, we can get to the SSD hard drive through the cross-platform AGP alarm!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7585\",\r\n    \"title\": \"If we calculate the hard drive, we can get to the SSL program through the multi-byte CSS microchip!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6319\",\r\n    \"title\": \"We need to copy the multi-byte SCSI program!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4369\",\r\n    \"title\": \"Try to input the SCSI bus, maybe it will generate the 1080p pixel!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-9035\",\r\n    \"title\": \"We need to override the solid state PNG array!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3970\",\r\n    \"title\": \"You can't index the transmitter without quantifying the haptic ASCII card!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4473\",\r\n    \"title\": \"You can't bypass the protocol without overriding the neural RSS program!\",\r\n    \"status\": \"todo\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-4136\",\r\n    \"title\": \"You can't hack the hard drive without hacking the primary JSON program!\",\r\n    \"status\": \"canceled\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-3939\",\r\n    \"title\": \"Use the back-end SQL firewall, then you can connect the neural hard drive!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"low\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-2007\",\r\n    \"title\": \"I'll input the back-end USB protocol, that should bandwidth the PCI system!\",\r\n    \"status\": \"backlog\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-7516\",\r\n    \"title\": \"Use the primary SQL program, then you can generate the auxiliary transmitter!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"documentation\",\r\n    \"priority\": \"medium\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-6906\",\r\n    \"title\": \"Try to back up the DRAM system, maybe it will reboot the online transmitter!\",\r\n    \"status\": \"done\",\r\n    \"label\": \"feature\",\r\n    \"priority\": \"high\"\r\n  },\r\n  {\r\n    \"id\": \"TASK-5207\",\r\n    \"title\": \"The SMS interface is down, copy the bluetooth bus so we can quantify the VGA card!\",\r\n    \"status\": \"in progress\",\r\n    \"label\": \"bug\",\r\n    \"priority\": \"low\"\r\n  }\r\n]",
      "type": "registry:component",
      "target": "components/tasks/data/tasks.json"
    },
    {
      "path": "examples/tasks/page.tsx",
      "content": "import { promises as fs } from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\n\nimport { columns } from \"./components/columns\";\nimport { DataTable } from \"./components/data-table\";\nimport { UserNav } from \"./components/user-nav\";\nimport { taskSchema } from \"./data/schema\";\n\nasync function getTasks() {\n  const data = await fs.readFile(path.join(process.cwd(), \"examples/tasks/data/tasks.json\"));\n\n  const tasks = JSON.parse(data.toString());\n\n  return z.array(taskSchema).parse(tasks);\n}\n\nexport default async function TaskPage() {\n  const tasks = await getTasks();\n\n  return (\n    <div className=\"h-full flex-1 flex-col gap-8 p-8 md:flex\">\n      <div className=\"flex items-center justify-between gap-2\">\n        <div className=\"flex flex-col gap-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight\">Welcome back!</h2>\n          <p className=\"text-muted-foreground\">Here&apos;s a list of your tasks for this month.</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <UserNav />\n        </div>\n      </div>\n      <DataTable data={tasks} columns={columns} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tasks/page.tsx"
    },
    {
      "path": "examples\\tasks\\components\\columns.tsx",
      "content": "\"use client\";\n\nimport { ColumnDef } from \"@tanstack/react-table\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nimport { labels, priorities, statuses } from \"../data/data\";\nimport { Task } from \"../data/schema\";\nimport { DataTableColumnHeader } from \"./data-table-column-header\";\nimport { DataTableRowActions } from \"./data-table-row-actions\";\n\nexport const columns: ColumnDef<Task>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: \"id\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Task\" />,\n    cell: ({ row }) => <div className=\"w-[80px]\">{row.getValue(\"id\")}</div>,\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: \"title\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Title\" />,\n    cell: ({ row }) => {\n      const label = labels.find((label) => label.value === row.original.label);\n\n      return (\n        <div className=\"flex gap-2\">\n          {label && <Badge variant=\"outline\">{label.label}</Badge>}\n          <span className=\"max-w-[500px] truncate font-medium\">{row.getValue(\"title\")}</span>\n        </div>\n      );\n    }\n  },\n  {\n    accessorKey: \"status\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\n    cell: ({ row }) => {\n      const status = statuses.find((status) => status.value === row.getValue(\"status\"));\n\n      if (!status) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex w-[100px] items-center gap-2\">\n          {status.icon && <status.icon className=\"text-muted-foreground size-4\" />}\n          <span>{status.label}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    }\n  },\n  {\n    accessorKey: \"priority\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Priority\" />,\n    cell: ({ row }) => {\n      const priority = priorities.find((priority) => priority.value === row.getValue(\"priority\"));\n\n      if (!priority) {\n        return null;\n      }\n\n      return (\n        <div className=\"flex items-center gap-2\">\n          {priority.icon && <priority.icon className=\"text-muted-foreground size-4\" />}\n          <span>{priority.label}</span>\n        </div>\n      );\n    },\n    filterFn: (row, id, value) => {\n      return value.includes(row.getValue(id));\n    }\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => <DataTableRowActions row={row} />\n  }\n];\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\badge.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\checkbox.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\tasks\\data\\data.tsx",
      "content": "import {\r\n  ArrowDown,\r\n  ArrowRight,\r\n  ArrowUp,\r\n  CheckCircle,\r\n  Circle,\r\n  CircleOff,\r\n  HelpCircle,\r\n  Timer,\r\n} from \"lucide-react\"\r\n\r\nexport const labels = [\r\n  {\r\n    value: \"bug\",\r\n    label: \"Bug\",\r\n  },\r\n  {\r\n    value: \"feature\",\r\n    label: \"Feature\",\r\n  },\r\n  {\r\n    value: \"documentation\",\r\n    label: \"Documentation\",\r\n  },\r\n]\r\n\r\nexport const statuses = [\r\n  {\r\n    value: \"backlog\",\r\n    label: \"Backlog\",\r\n    icon: HelpCircle,\r\n  },\r\n  {\r\n    value: \"todo\",\r\n    label: \"Todo\",\r\n    icon: Circle,\r\n  },\r\n  {\r\n    value: \"in progress\",\r\n    label: \"In Progress\",\r\n    icon: Timer,\r\n  },\r\n  {\r\n    value: \"done\",\r\n    label: \"Done\",\r\n    icon: CheckCircle,\r\n  },\r\n  {\r\n    value: \"canceled\",\r\n    label: \"Canceled\",\r\n    icon: CircleOff,\r\n  },\r\n]\r\n\r\nexport const priorities = [\r\n  {\r\n    label: \"Low\",\r\n    value: \"low\",\r\n    icon: ArrowDown,\r\n  },\r\n  {\r\n    label: \"Medium\",\r\n    value: \"medium\",\r\n    icon: ArrowRight,\r\n  },\r\n  {\r\n    label: \"High\",\r\n    value: \"high\",\r\n    icon: ArrowUp,\r\n  },\r\n]\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\tasks\\data\\schema.ts",
      "content": "import { z } from \"zod\"\r\n\r\n// We're keeping a simple non-relational schema here.\r\n// IRL, you will have a schema for your data models.\r\nexport const taskSchema = z.object({\r\n  id: z.string(),\r\n  title: z.string(),\r\n  status: z.string(),\r\n  label: z.string(),\r\n  priority: z.string(),\r\n})\r\n\r\nexport type Task = z.infer<typeof taskSchema>\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\tasks\\components\\data-table-column-header.tsx",
      "content": "import { Column } from \"@tanstack/react-table\";\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\n\ninterface DataTableColumnHeaderProps<TData, TValue> extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title: string;\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\" className=\"data-[state=open]:bg-accent -ml-3 h-8\">\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDown />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUp />\n            ) : (\n              <ChevronsUpDown />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUp />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDown />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeOff />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\tasks\\components\\data-table-row-actions.tsx",
      "content": "\"use client\";\n\nimport { Row } from \"@tanstack/react-table\";\nimport { MoreHorizontal } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\n\nimport { labels } from \"../data/data\";\nimport { taskSchema } from \"../data/schema\";\n\ninterface DataTableRowActionsProps<TData> {\n  row: Row<TData>;\n}\n\nexport function DataTableRowActions<TData>({ row }: DataTableRowActionsProps<TData>) {\n  const task = taskSchema.parse(row.original);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"data-[state=open]:bg-muted size-8\">\n          <MoreHorizontal />\n          <span className=\"sr-only\">Open menu</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\n        <DropdownMenuItem>Edit</DropdownMenuItem>\n        <DropdownMenuItem>Make a copy</DropdownMenuItem>\n        <DropdownMenuItem>Favorite</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger>Labels</DropdownMenuSubTrigger>\n          <DropdownMenuSubContent>\n            <DropdownMenuRadioGroup value={task.label}>\n              {labels.map((label) => (\n                <DropdownMenuRadioItem key={label.value} value={label.value}>\n                  {label.label}\n                </DropdownMenuRadioItem>\n              ))}\n            </DropdownMenuRadioGroup>\n          </DropdownMenuSubContent>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem variant=\"destructive\">\n          Delete\n          <DropdownMenuShortcut>⌘⌫</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\tasks\\components\\data-table-faceted-filter.tsx",
      "content": "import * as React from \"react\";\nimport { Column } from \"@tanstack/react-table\";\nimport { Check, PlusCircle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator\n} from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface DataTableFacetedFilterProps<TData, TValue> {\n  column?: Column<TData, TValue>;\n  title?: string;\n  options: {\n    label: string;\n    value: string;\n    icon?: React.ComponentType<{ className?: string }>;\n  }[];\n}\n\nexport function DataTableFacetedFilter<TData, TValue>({\n  column,\n  title,\n  options\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const facets = column?.getFacetedUniqueValues();\n  const selectedValues = new Set(column?.getFilterValue() as string[]);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 border-dashed\">\n          <PlusCircle />\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\n              <Badge variant=\"secondary\" className=\"rounded-sm px-1 font-normal lg:hidden\">\n                {selectedValues.size}\n              </Badge>\n              <div className=\"hidden gap-1 lg:flex\">\n                {selectedValues.size > 2 ? (\n                  <Badge variant=\"secondary\" className=\"rounded-sm px-1 font-normal\">\n                    {selectedValues.size} selected\n                  </Badge>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        variant=\"secondary\"\n                        key={option.value}\n                        className=\"rounded-sm px-1 font-normal\">\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList>\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => {\n                const isSelected = selectedValues.has(option.value);\n                return (\n                  <CommandItem\n                    key={option.value}\n                    onSelect={() => {\n                      if (isSelected) {\n                        selectedValues.delete(option.value);\n                      } else {\n                        selectedValues.add(option.value);\n                      }\n                      const filterValues = Array.from(selectedValues);\n                      column?.setFilterValue(filterValues.length ? filterValues : undefined);\n                    }}>\n                    <div\n                      className={cn(\n                        \"flex size-4 items-center justify-center rounded-[4px] border\",\n                        isSelected\n                          ? \"bg-primary border-primary text-primary-foreground\"\n                          : \"border-input [&_svg]:invisible\"\n                      )}>\n                      <Check className=\"text-primary-foreground size-3.5\" />\n                    </div>\n                    {option.icon && <option.icon className=\"text-muted-foreground size-4\" />}\n                    <span>{option.label}</span>\n                    {facets?.get(option.value) && (\n                      <span className=\"text-muted-foreground ml-auto flex size-4 items-center justify-center font-mono text-xs\">\n                        {facets.get(option.value)}\n                      </span>\n                    )}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={() => column?.setFilterValue(undefined)}\n                    className=\"justify-center text-center\">\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\command.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { SearchIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn(\"overflow-hidden p-0\", className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\popover.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\separator.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\tasks\\components\\data-table-pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\";\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from \"@/components/ui/select\";\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTablePagination<TData>({ table }: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2\">\n      <div className=\"text-muted-foreground flex-1 text-sm\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}>\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 25, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}>\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}>\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}>\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}>\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\tasks\\components\\data-table-toolbar.tsx",
      "content": "\"use client\";\n\nimport { Table } from \"@tanstack/react-table\";\nimport { X } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTableViewOptions } from \"./data-table-view-options\";\n\nimport { priorities, statuses } from \"../data/data\";\nimport { DataTableFacetedFilter } from \"./data-table-faceted-filter\";\n\ninterface DataTableToolbarProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTableToolbar<TData>({ table }: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0;\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex flex-1 items-center gap-2\">\n        <Input\n          placeholder=\"Filter tasks...\"\n          value={(table.getColumn(\"title\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) => table.getColumn(\"title\")?.setFilterValue(event.target.value)}\n          className=\"h-8 w-[150px] lg:w-[250px]\"\n        />\n        {table.getColumn(\"status\") && (\n          <DataTableFacetedFilter\n            column={table.getColumn(\"status\")}\n            title=\"Status\"\n            options={statuses}\n          />\n        )}\n        {table.getColumn(\"priority\") && (\n          <DataTableFacetedFilter\n            column={table.getColumn(\"priority\")}\n            title=\"Priority\"\n            options={priorities}\n          />\n        )}\n        {isFiltered && (\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => table.resetColumnFilters()}>\n            Reset\n            <X />\n          </Button>\n        )}\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <DataTableViewOptions table={table} />\n        <Button size=\"sm\">Add Task</Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\tasks\\components\\data-table-view-options.tsx",
      "content": "\"use client\";\n\nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\";\nimport { Table } from \"@tanstack/react-table\";\nimport { Settings2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator\n} from \"@/components/ui/dropdown-menu\";\n\nexport function DataTableViewOptions<TData>({ table }: { table: Table<TData> }) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"ml-auto hidden h-8 lg:flex\">\n          <Settings2 />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter((column) => typeof column.accessorFn !== \"undefined\" && column.getCanHide())\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                key={column.id}\n                className=\"capitalize\"\n                checked={column.getIsVisible()}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}>\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            );\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\tasks\\components\\data-table.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable,\n  VisibilityState\n} from \"@tanstack/react-table\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from \"@/components/ui/table\";\n\nimport { DataTablePagination } from \"./data-table-pagination\";\nimport { DataTableToolbar } from \"./data-table-toolbar\";\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n}\n\nexport function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters\n    },\n    initialState: {\n      pagination: {\n        pageSize: 10\n      }\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues()\n  });\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <DataTableToolbar table={table} />\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id} colSpan={header.colSpan}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination table={table} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\table.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\tasks\\components\\user-nav.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\n\nexport function UserNav() {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-9 w-9\">\n            <AvatarImage src=\"/avatars/03.png\" alt=\"@shadcn\" />\n            <AvatarFallback>SC</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm leading-none font-medium\">shadcn</p>\n            <p className=\"text-muted-foreground text-xs leading-none\">m@example.com</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem>\n            Profile\n            <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Billing\n            <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Settings\n            <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>New Team</DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          Log out\n          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\tasks\\data\\seed.ts",
      "content": "import fs from \"fs\"\r\nimport path from \"path\"\r\nimport { faker } from \"@faker-js/faker\"\r\n\r\nimport { labels, priorities, statuses } from \"./data\"\r\n\r\nconst tasks = Array.from({ length: 100 }, () => ({\r\n  id: `TASK-${faker.number.int({ min: 1000, max: 9999 })}`,\r\n  title: faker.hacker.phrase().replace(/^./, (letter) => letter.toUpperCase()),\r\n  status: faker.helpers.arrayElement(statuses).value,\r\n  label: faker.helpers.arrayElement(labels).value,\r\n  priority: faker.helpers.arrayElement(priorities).value,\r\n}))\r\n\r\nfs.writeFileSync(\r\n  path.join(__dirname, \"tasks.json\"),\r\n  JSON.stringify(tasks, null, 2)\r\n)\r\n\r\nconsole.log(\"✅ Tasks data generated.\")\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\tasks\\page.tsx",
      "content": "import { promises as fs } from \"fs\";\nimport path from \"path\";\nimport { z } from \"zod\";\n\nimport { columns } from \"./components/columns\";\nimport { DataTable } from \"./components/data-table\";\nimport { UserNav } from \"./components/user-nav\";\nimport { taskSchema } from \"./data/schema\";\n\nasync function getTasks() {\n  const data = await fs.readFile(path.join(process.cwd(), \"examples/tasks/data/tasks.json\"));\n\n  const tasks = JSON.parse(data.toString());\n\n  return z.array(taskSchema).parse(tasks);\n}\n\nexport default async function TaskPage() {\n  const tasks = await getTasks();\n\n  return (\n    <div className=\"h-full flex-1 flex-col gap-8 p-8 md:flex\">\n      <div className=\"flex items-center justify-between gap-2\">\n        <div className=\"flex flex-col gap-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight\">Welcome back!</h2>\n          <p className=\"text-muted-foreground\">Here&apos;s a list of your tasks for this month.</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <UserNav />\n        </div>\n      </div>\n      <DataTable data={tasks} columns={columns} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
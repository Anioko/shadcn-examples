{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "playground",
  "type": "registry:page",
  "title": "Playground",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dialog",
    "lucide-react",
    "@radix-ui/react-slider",
    "@radix-ui/react-hover-card",
    "@radix-ui/react-label",
    "@radix-ui/react-popover",
    "cmdk",
    "sonner",
    "@radix-ui/react-alert-dialog",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-switch",
    "@radix-ui/react-separator",
    "@radix-ui/react-tabs"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "hover-card",
    "label",
    "slider",
    "command",
    "popover",
    "alert-dialog",
    "dropdown-menu",
    "switch",
    "input",
    "textarea",
    "separator",
    "tabs"
  ],
  "files": [
    {
      "path": "examples/playground/components/code-viewer.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from \"@/components/ui/dialog\";\n\nexport function CodeViewer() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"secondary\">View code</Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>View code</DialogTitle>\n          <DialogDescription>\n            You can use the following code to start integrating your current prompt and settings\n            into your application.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-4\">\n          <div className=\"rounded-md bg-black p-6\">\n            <pre>\n              <code className=\"grid gap-1 text-sm text-white [&_span]:h-4\">\n                <span>\n                  <span className=\"text-sky-300\">import</span> os\n                </span>\n                <span>\n                  <span className=\"text-sky-300\">import</span> openai\n                </span>\n                <span />\n                <span>\n                  openai.api_key = os.getenv(\n                  <span className=\"text-green-300\">&quot;OPENAI_API_KEY&quot;</span>)\n                </span>\n                <span />\n                <span>response = openai.Completion.create(</span>\n                <span>\n                  {\" \"}\n                  model=\n                  <span className=\"text-green-300\">&quot;davinci&quot;</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  prompt=<span className=\"text-amber-300\">&quot;&quot;</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  temperature=<span className=\"text-amber-300\">0.9</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  max_tokens=<span className=\"text-amber-300\">5</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  top_p=<span className=\"text-amber-300\">1</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  frequency_penalty=<span className=\"text-amber-300\">0</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  presence_penalty=<span className=\"text-green-300\">0</span>,\n                </span>\n                <span>)</span>\n              </code>\n            </pre>\n          </div>\n          <div>\n            <p className=\"text-muted-foreground text-sm\">\n              Your API Key can be found here. You should use environment variables or a secret\n              management tool to expose your key to your applications.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/code-viewer.tsx"
    },
    {
      "path": "examples/playground/components/maxlength-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { SliderProps } from \"@radix-ui/react-slider\";\n\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\n\ninterface MaxLengthSelectorProps {\n  defaultValue: SliderProps[\"defaultValue\"];\n}\n\nexport function MaxLengthSelector({ defaultValue }: MaxLengthSelectorProps) {\n  const [value, setValue] = React.useState(defaultValue);\n\n  return (\n    <div className=\"grid gap-2 pt-2\">\n      <HoverCard openDelay={200}>\n        <HoverCardTrigger asChild>\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"maxlength\">Maximum Length</Label>\n              <span className=\"text-muted-foreground hover:border-border w-12 rounded-md border border-transparent px-2 py-0.5 text-right text-sm\">\n                {value}\n              </span>\n            </div>\n            <Slider\n              id=\"maxlength\"\n              max={4000}\n              defaultValue={value}\n              step={10}\n              onValueChange={setValue}\n              aria-label=\"Maximum Length\"\n            />\n          </div>\n        </HoverCardTrigger>\n        <HoverCardContent align=\"start\" className=\"w-[260px] text-sm\" side=\"left\">\n          The maximum number of tokens to generate. Requests can use up to 2,048 or 4,000 tokens,\n          shared between prompt and completion. The exact limit varies by model.\n        </HoverCardContent>\n      </HoverCard>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/maxlength-selector.tsx"
    },
    {
      "path": "examples/playground/components/model-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { PopoverProps } from \"@radix-ui/react-popover\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useMutationObserver } from \"@/hooks/use-mutation-observer\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList\n} from \"@/components/ui/command\";\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nimport { Model, ModelType } from \"../data/models\";\n\ninterface ModelSelectorProps extends PopoverProps {\n  types: readonly ModelType[];\n  models: Model[];\n}\n\nexport function ModelSelector({ models, types, ...props }: ModelSelectorProps) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedModel, setSelectedModel] = React.useState<Model>(models[0]);\n  const [peekedModel, setPeekedModel] = React.useState<Model>(models[0]);\n\n  return (\n    <div className=\"grid gap-3\">\n      <HoverCard openDelay={200}>\n        <HoverCardTrigger asChild>\n          <Label htmlFor=\"model\">Model</Label>\n        </HoverCardTrigger>\n        <HoverCardContent align=\"start\" className=\"w-[260px] text-sm\" side=\"left\">\n          The model which will generate the completion. Some models are suitable for natural\n          language tasks, others specialize in code. Learn more.\n        </HoverCardContent>\n      </HoverCard>\n      <Popover open={open} onOpenChange={setOpen} {...props}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            aria-label=\"Select a model\"\n            className=\"w-full justify-between\">\n            {selectedModel ? selectedModel.name : \"Select a model...\"}\n            <ChevronsUpDown className=\"text-muted-foreground\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent align=\"end\" className=\"w-[250px] p-0\">\n          <HoverCard>\n            <HoverCardContent side=\"left\" align=\"start\" forceMount className=\"min-h-[280px]\">\n              <div className=\"grid gap-2\">\n                <h4 className=\"leading-none font-medium\">{peekedModel.name}</h4>\n                <div className=\"text-muted-foreground text-sm\">{peekedModel.description}</div>\n                {peekedModel.strengths ? (\n                  <div className=\"mt-4 grid gap-2\">\n                    <h5 className=\"text-sm leading-none font-medium\">Strengths</h5>\n                    <ul className=\"text-muted-foreground text-sm\">{peekedModel.strengths}</ul>\n                  </div>\n                ) : null}\n              </div>\n            </HoverCardContent>\n            <Command loop>\n              <CommandList className=\"h-(--cmdk-list-height) max-h-[400px]\">\n                <CommandInput placeholder=\"Search Models...\" />\n                <CommandEmpty>No Models found.</CommandEmpty>\n                <HoverCardTrigger />\n                {types.map((type) => (\n                  <CommandGroup key={type} heading={type}>\n                    {models\n                      .filter((model) => model.type === type)\n                      .map((model) => (\n                        <ModelItem\n                          key={model.id}\n                          model={model}\n                          isSelected={selectedModel?.id === model.id}\n                          onPeek={(model) => setPeekedModel(model)}\n                          onSelect={() => {\n                            setSelectedModel(model);\n                            setOpen(false);\n                          }}\n                        />\n                      ))}\n                  </CommandGroup>\n                ))}\n              </CommandList>\n            </Command>\n          </HoverCard>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\ninterface ModelItemProps {\n  model: Model;\n  isSelected: boolean;\n  onSelect: () => void;\n  onPeek: (model: Model) => void;\n}\n\nfunction ModelItem({ model, isSelected, onSelect, onPeek }: ModelItemProps) {\n  const ref = React.useRef<HTMLDivElement>(null);\n\n  useMutationObserver(ref, (mutations) => {\n    mutations.forEach((mutation) => {\n      if (\n        mutation.type === \"attributes\" &&\n        mutation.attributeName === \"aria-selected\" &&\n        ref.current?.getAttribute(\"aria-selected\") === \"true\"\n      ) {\n        onPeek(model);\n      }\n    });\n  });\n\n  return (\n    <CommandItem\n      key={model.id}\n      onSelect={onSelect}\n      ref={ref}\n      className=\"data-[selected=true]:bg-primary data-[selected=true]:text-primary-foreground\">\n      {model.name}\n      <Check className={cn(\"ml-auto\", isSelected ? \"opacity-100\" : \"opacity-0\")} />\n    </CommandItem>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/model-selector.tsx"
    },
    {
      "path": "examples/playground/components/preset-actions.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Dialog } from \"@radix-ui/react-dialog\";\nimport { MoreHorizontal } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nimport {\n  AlertDialog,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle\n} from \"@/components/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\n\nexport function PresetActions() {\n  const [open, setIsOpen] = React.useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = React.useState(false);\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"secondary\" size=\"icon\">\n            <span className=\"sr-only\">Actions</span>\n            <MoreHorizontal />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onSelect={() => setIsOpen(true)}>\n            Content filter preferences\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onSelect={() => setShowDeleteDialog(true)} className=\"text-red-600\">\n            Delete preset\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n      <Dialog open={open} onOpenChange={setIsOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Content filter preferences</DialogTitle>\n            <DialogDescription>\n              The content filter flags text that may violate our content policy. It&apos;s powered\n              by our moderation endpoint which is free to use to moderate your OpenAI API traffic.\n              Learn more.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-6\">\n            <h4 className=\"text-muted-foreground text-sm\">Playground Warnings</h4>\n            <div className=\"flex items-start justify-between gap-4 pt-3\">\n              <Switch name=\"show\" id=\"show\" defaultChecked={true} />\n              <Label className=\"grid gap-1 font-normal\" htmlFor=\"show\">\n                <span className=\"font-semibold\">Show a warning when content is flagged</span>\n                <span className=\"text-muted-foreground text-sm\">\n                  A warning will be shown when sexual, hateful, violent or self-harm content is\n                  detected.\n                </span>\n              </Label>\n            </div>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button variant=\"secondary\">Close</Button>\n            </DialogClose>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This preset will no longer be accessible by you or\n              others you&apos;ve shared it with.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <Button\n              variant=\"destructive\"\n              onClick={() => {\n                setShowDeleteDialog(false);\n                toast.success(\"This preset has been deleted.\");\n              }}>\n              Delete\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/preset-actions.tsx"
    },
    {
      "path": "examples/playground/components/preset-save.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport function PresetSave() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"secondary\">Save</Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Save preset</DialogTitle>\n          <DialogDescription>\n            This will save the current playground state as a preset which you can access later or\n            share with others.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-6 py-4\">\n          <div className=\"grid gap-3\">\n            <Label htmlFor=\"name\">Name</Label>\n            <Input id=\"name\" autoFocus />\n          </div>\n          <div className=\"grid gap-3\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea id=\"description\" />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button type=\"submit\">Save</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/preset-save.tsx"
    },
    {
      "path": "examples/playground/components/preset-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { PopoverProps } from \"@radix-ui/react-popover\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator\n} from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nimport { Preset } from \"../data/presets\";\n\ninterface PresetSelectorProps extends PopoverProps {\n  presets: Preset[];\n}\n\nexport function PresetSelector({ presets, ...props }: PresetSelectorProps) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedPreset, setSelectedPreset] = React.useState<Preset>();\n\n  return (\n    <Popover open={open} onOpenChange={setOpen} {...props}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-label=\"Load a preset...\"\n          aria-expanded={open}\n          className=\"flex-1 justify-between md:max-w-[200px] lg:max-w-[300px]\">\n          {selectedPreset ? selectedPreset.name : \"Load a preset...\"}\n          <ChevronsUpDown className=\"opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search presets...\" />\n          <CommandList>\n            <CommandEmpty>No presets found.</CommandEmpty>\n            <CommandGroup heading=\"Examples\">\n              {presets.map((preset) => (\n                <CommandItem\n                  key={preset.id}\n                  onSelect={() => {\n                    setSelectedPreset(preset);\n                    setOpen(false);\n                  }}>\n                  {preset.name}\n                  <Check\n                    className={cn(\n                      \"ml-auto\",\n                      selectedPreset?.id === preset.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n            <CommandSeparator />\n            <CommandGroup>\n              <CommandItem>More examples</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/preset-selector.tsx"
    },
    {
      "path": "examples/playground/components/preset-share.tsx",
      "content": "import { Copy } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nexport function PresetShare() {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"secondary\">Share</Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"end\" className=\"flex w-[520px] flex-col gap-4\">\n        <div className=\"flex flex-col gap-1 text-center sm:text-left\">\n          <h3 className=\"text-lg font-semibold\">Share preset</h3>\n          <p className=\"text-muted-foreground text-sm\">\n            Anyone who has this link and an OpenAI account will be able to view this.\n          </p>\n        </div>\n        <div className=\"relative flex-1\">\n          <Label htmlFor=\"link\" className=\"sr-only\">\n            Link\n          </Label>\n          <Input\n            id=\"link\"\n            defaultValue=\"https://platform.openai.com/playground/p/7bbKYQvsVkNmVb8NGcdUOLae?model=text-davinci-003\"\n            readOnly\n            className=\"h-9 pr-10\"\n          />\n          <Button\n            type=\"submit\"\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"absolute top-1 right-1 size-7\">\n            <span className=\"sr-only\">Copy</span>\n            <Copy className=\"size-3.5\" />\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/preset-share.tsx"
    },
    {
      "path": "examples/playground/components/temperature-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { SliderProps } from \"@radix-ui/react-slider\";\n\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\n\ninterface TemperatureSelectorProps {\n  defaultValue: SliderProps[\"defaultValue\"];\n}\n\nexport function TemperatureSelector({ defaultValue }: TemperatureSelectorProps) {\n  const [value, setValue] = React.useState(defaultValue);\n\n  return (\n    <div className=\"grid gap-2 pt-2\">\n      <HoverCard openDelay={200}>\n        <HoverCardTrigger asChild>\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"temperature\">Temperature</Label>\n              <span className=\"text-muted-foreground hover:border-border w-12 rounded-md border border-transparent px-2 py-0.5 text-right text-sm\">\n                {value}\n              </span>\n            </div>\n            <Slider\n              id=\"temperature\"\n              max={1}\n              defaultValue={value}\n              step={0.1}\n              onValueChange={setValue}\n              aria-label=\"Temperature\"\n            />\n          </div>\n        </HoverCardTrigger>\n        <HoverCardContent align=\"start\" className=\"w-[260px] text-sm\" side=\"left\">\n          Controls randomness: lowering results in less random completions. As the temperature\n          approaches zero, the model will become deterministic and repetitive.\n        </HoverCardContent>\n      </HoverCard>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/temperature-selector.tsx"
    },
    {
      "path": "examples/playground/components/top-p-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { SliderProps } from \"@radix-ui/react-slider\";\n\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\n\ninterface TopPSelectorProps {\n  defaultValue: SliderProps[\"defaultValue\"];\n}\n\nexport function TopPSelector({ defaultValue }: TopPSelectorProps) {\n  const [value, setValue] = React.useState(defaultValue);\n\n  return (\n    <div className=\"grid gap-2 pt-2\">\n      <HoverCard openDelay={200}>\n        <HoverCardTrigger asChild>\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"top-p\">Top P</Label>\n              <span className=\"text-muted-foreground hover:border-border w-12 rounded-md border border-transparent px-2 py-0.5 text-right text-sm\">\n                {value}\n              </span>\n            </div>\n            <Slider\n              id=\"top-p\"\n              max={1}\n              defaultValue={value}\n              step={0.1}\n              onValueChange={setValue}\n              aria-label=\"Top P\"\n            />\n          </div>\n        </HoverCardTrigger>\n        <HoverCardContent align=\"start\" className=\"w-[260px] text-sm\" side=\"left\">\n          Control diversity via nucleus sampling: 0.5 means half of all likelihood-weighted options\n          are considered.\n        </HoverCardContent>\n      </HoverCard>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/components/top-p-selector.tsx"
    },
    {
      "path": "examples/playground/data/models.ts",
      "content": "export const types = [\"GPT-3\", \"Codex\"] as const\r\n\r\nexport type ModelType = (typeof types)[number]\r\n\r\nexport interface Model<Type = string> {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  strengths?: string\r\n  type: Type\r\n}\r\n\r\nexport const models: Model<ModelType>[] = [\r\n  {\r\n    id: \"c305f976-8e38-42b1-9fb7-d21b2e34f0da\",\r\n    name: \"text-davinci-003\",\r\n    description:\r\n      \"Most capable GPT-3 model. Can do any task the other models can do, often with higher quality, longer output and better instruction-following. Also supports inserting completions within text.\",\r\n    type: \"GPT-3\",\r\n    strengths:\r\n      \"Complex intent, cause and effect, creative generation, search, summarization for audience\",\r\n  },\r\n  {\r\n    id: \"464a47c3-7ab5-44d7-b669-f9cb5a9e8465\",\r\n    name: \"text-curie-001\",\r\n    description: \"Very capable, but faster and lower cost than Davinci.\",\r\n    type: \"GPT-3\",\r\n    strengths:\r\n      \"Language translation, complex classification, sentiment, summarization\",\r\n  },\r\n  {\r\n    id: \"ac0797b0-7e31-43b6-a494-da7e2ab43445\",\r\n    name: \"text-babbage-001\",\r\n    description: \"Capable of straightforward tasks, very fast, and lower cost.\",\r\n    type: \"GPT-3\",\r\n    strengths: \"Moderate classification, semantic search\",\r\n  },\r\n  {\r\n    id: \"be638fb1-973b-4471-a49c-290325085802\",\r\n    name: \"text-ada-001\",\r\n    description:\r\n      \"Capable of very simple tasks, usually the fastest model in the GPT-3 series, and lowest cost.\",\r\n    type: \"GPT-3\",\r\n    strengths:\r\n      \"Parsing text, simple classification, address correction, keywords\",\r\n  },\r\n  {\r\n    id: \"b43c0ea9-5ad4-456a-ae29-26cd77b6d0fb\",\r\n    name: \"code-davinci-002\",\r\n    description:\r\n      \"Most capable Codex model. Particularly good at translating natural language to code. In addition to completing code, also supports inserting completions within code.\",\r\n    type: \"Codex\",\r\n  },\r\n  {\r\n    id: \"bbd57291-4622-4a21-9eed-dd6bd786fdd1\",\r\n    name: \"code-cushman-001\",\r\n    description:\r\n      \"Almost as capable as Davinci Codex, but slightly faster. This speed advantage may make it preferable for real-time applications.\",\r\n    type: \"Codex\",\r\n    strengths: \"Real-time application where low-latency is preferable\",\r\n  },\r\n]\r\n",
      "type": "registry:component",
      "target": "components/playground/data/models.ts"
    },
    {
      "path": "examples/playground/data/presets.ts",
      "content": "export interface Preset {\r\n  id: string\r\n  name: string\r\n}\r\n\r\nexport const presets: Preset[] = [\r\n  {\r\n    id: \"9cb0e66a-9937-465d-a188-2c4c4ae2401f\",\r\n    name: \"Grammatical Standard English\",\r\n  },\r\n  {\r\n    id: \"61eb0e32-2391-4cd3-adc3-66efe09bc0b7\",\r\n    name: \"Summarize for a 2nd grader\",\r\n  },\r\n  {\r\n    id: \"a4e1fa51-f4ce-4e45-892c-224030a00bdd\",\r\n    name: \"Text to command\",\r\n  },\r\n  {\r\n    id: \"cc198b13-4933-43aa-977e-dcd95fa30770\",\r\n    name: \"Q&A\",\r\n  },\r\n  {\r\n    id: \"adfa95be-a575-45fd-a9ef-ea45386c64de\",\r\n    name: \"English to other languages\",\r\n  },\r\n  {\r\n    id: \"c569a06a-0bd6-43a7-adf9-bf68c09e7a79\",\r\n    name: \"Parse unstructured data\",\r\n  },\r\n  {\r\n    id: \"15ccc0d7-f37a-4f0a-8163-a37e162877dc\",\r\n    name: \"Classification\",\r\n  },\r\n  {\r\n    id: \"4641ef41-1c0f-421d-b4b2-70fe431081f3\",\r\n    name: \"Natural language to Python\",\r\n  },\r\n  {\r\n    id: \"48d34082-72f3-4a1b-a14d-f15aca4f57a0\",\r\n    name: \"Explain code\",\r\n  },\r\n  {\r\n    id: \"dfd42fd5-0394-4810-92c6-cc907d3bfd1a\",\r\n    name: \"Chat\",\r\n  },\r\n]\r\n",
      "type": "registry:component",
      "target": "components/playground/data/presets.ts"
    },
    {
      "path": "examples/playground/page.tsx",
      "content": "import { RotateCcw } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nimport { CodeViewer } from \"./components/code-viewer\";\nimport { MaxLengthSelector } from \"./components/maxlength-selector\";\nimport { ModelSelector } from \"./components/model-selector\";\nimport { PresetActions } from \"./components/preset-actions\";\nimport { PresetSave } from \"./components/preset-save\";\nimport { PresetSelector } from \"./components/preset-selector\";\nimport { PresetShare } from \"./components/preset-share\";\nimport { TemperatureSelector } from \"./components/temperature-selector\";\nimport { TopPSelector } from \"./components/top-p-selector\";\nimport { models, types } from \"./data/models\";\nimport { presets } from \"./data/presets\";\n\nexport default function PlaygroundPage() {\n  return (\n    <div>\n      <div className=\"flex flex-col items-start justify-between gap-2 p-4 py-4 sm:flex-row sm:items-center sm:gap-0 md:h-16\">\n        <h2 className=\"text-lg font-semibold\">Playground</h2>\n        <div className=\"ml-auto flex w-full gap-2 sm:justify-end\">\n          <PresetSelector presets={presets} />\n          <PresetSave />\n          <div className=\"hidden gap-2 md:flex\">\n            <CodeViewer />\n            <PresetShare />\n          </div>\n          <PresetActions />\n        </div>\n      </div>\n      <Separator />\n      <Tabs defaultValue=\"complete\" className=\"flex h-[calc(100vh-4.5rem)] flex-1 flex-col\">\n        <div className=\"flex flex-1 flex-col p-4\">\n          <div className=\"grid flex-1 items-stretch gap-6 md:grid-cols-[1fr_200px]\">\n            <div className=\"hidden flex-col gap-6 sm:flex md:order-2\">\n              <div className=\"grid gap-3\">\n                <HoverCard openDelay={200}>\n                  <HoverCardTrigger asChild>\n                    <span className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                      Mode\n                    </span>\n                  </HoverCardTrigger>\n                  <HoverCardContent className=\"w-[320px] text-sm\" side=\"left\">\n                    Choose the interface that best suits your task. You can provide: a simple prompt\n                    to complete, starting and ending text to insert a completion within, or some\n                    text with instructions to edit it.\n                  </HoverCardContent>\n                </HoverCard>\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"complete\">\n                    <span className=\"sr-only\">Complete</span>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"none\">\n                      <rect x=\"4\" y=\"3\" width=\"12\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"7\" width=\"12\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"8.5\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"8.5\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"13\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                    </svg>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"insert\">\n                    <span className=\"sr-only\">Insert</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      className=\"h-5 w-5\">\n                      <path\n                        fillRule=\"evenodd\"\n                        clipRule=\"evenodd\"\n                        d=\"M14.491 7.769a.888.888 0 0 1 .287.648.888.888 0 0 1-.287.648l-3.916 3.667a1.013 1.013 0 0 1-.692.268c-.26 0-.509-.097-.692-.268L5.275 9.065A.886.886 0 0 1 5 8.42a.889.889 0 0 1 .287-.64c.181-.17.427-.267.683-.269.257-.002.504.09.69.258L8.903 9.87V3.917c0-.243.103-.477.287-.649.183-.171.432-.268.692-.268.26 0 .509.097.692.268a.888.888 0 0 1 .287.649V9.87l2.245-2.102c.183-.172.432-.269.692-.269.26 0 .508.097.692.269Z\"\n                        fill=\"currentColor\"></path>\n                      <rect x=\"4\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"8.5\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"13\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                    </svg>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"edit\">\n                    <span className=\"sr-only\">Edit</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      className=\"h-5 w-5\">\n                      <rect x=\"4\" y=\"3\" width=\"12\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"7\" width=\"12\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"15\" width=\"4\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"8.5\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <path\n                        d=\"M17.154 11.346a1.182 1.182 0 0 0-1.671 0L11 15.829V17.5h1.671l4.483-4.483a1.182 1.182 0 0 0 0-1.671Z\"\n                        fill=\"currentColor\"></path>\n                    </svg>\n                  </TabsTrigger>\n                </TabsList>\n              </div>\n              <ModelSelector types={types} models={models} />\n              <TemperatureSelector defaultValue={[0.56]} />\n              <MaxLengthSelector defaultValue={[256]} />\n              <TopPSelector defaultValue={[0.9]} />\n            </div>\n            <div className=\"flex flex-1 flex-col *:data-[slot=tab-content]:flex-1 md:order-1\">\n              <TabsContent value=\"complete\" className=\"mt-0 border-0 p-0\">\n                <div className=\"flex h-full flex-col gap-4\">\n                  <Textarea\n                    placeholder=\"Write a tagline for an ice cream shop\"\n                    className=\"flex-1 p-4\"\n                  />\n                  <div className=\"flex items-center gap-2\">\n                    <Button>Submit</Button>\n                    <Button variant=\"secondary\">\n                      <span className=\"sr-only\">Show history</span>\n                      <RotateCcw />\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n              <TabsContent value=\"insert\" className=\"mt-0 flex flex-col gap-4 border-0 p-0\">\n                <div className=\"grid h-full grid-rows-2 gap-6 lg:grid-cols-2 lg:grid-rows-1\">\n                  <Textarea\n                    placeholder=\"We're writing to [inset]. Congrats from OpenAI!\"\n                    className=\"h-full p-4\"\n                  />\n                  <div className=\"bg-muted rounded-md border\"></div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button>Submit</Button>\n                  <Button variant=\"secondary\">\n                    <span className=\"sr-only\">Show history</span>\n                    <RotateCcw />\n                  </Button>\n                </div>\n              </TabsContent>\n              <TabsContent value=\"edit\" className=\"mt-0 flex flex-col gap-4 border-0 p-0\">\n                <div className=\"grid h-full gap-6 lg:grid-cols-2\">\n                  <div className=\"flex flex-col gap-4\">\n                    <div className=\"flex flex-1 flex-col gap-2\">\n                      <Label htmlFor=\"input\" className=\"sr-only\">\n                        Input\n                      </Label>\n                      <Textarea\n                        id=\"input\"\n                        placeholder=\"We is going to the market.\"\n                        className=\"flex-1 p-4\"\n                      />\n                    </div>\n                    <div className=\"flex flex-col gap-2\">\n                      <Label htmlFor=\"instructions\">Instructions</Label>\n                      <Textarea id=\"instructions\" placeholder=\"Fix the grammar.\" />\n                    </div>\n                  </div>\n                  <div className=\"bg-muted rounded-md border\" />\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button>Submit</Button>\n                  <Button variant=\"secondary\">\n                    <span className=\"sr-only\">Show history</span>\n                    <RotateCcw />\n                  </Button>\n                </div>\n              </TabsContent>\n            </div>\n          </div>\n        </div>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/playground/page.tsx"
    },
    {
      "path": "examples\\playground\\components\\code-viewer.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from \"@/components/ui/dialog\";\n\nexport function CodeViewer() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"secondary\">View code</Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>View code</DialogTitle>\n          <DialogDescription>\n            You can use the following code to start integrating your current prompt and settings\n            into your application.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-4\">\n          <div className=\"rounded-md bg-black p-6\">\n            <pre>\n              <code className=\"grid gap-1 text-sm text-white [&_span]:h-4\">\n                <span>\n                  <span className=\"text-sky-300\">import</span> os\n                </span>\n                <span>\n                  <span className=\"text-sky-300\">import</span> openai\n                </span>\n                <span />\n                <span>\n                  openai.api_key = os.getenv(\n                  <span className=\"text-green-300\">&quot;OPENAI_API_KEY&quot;</span>)\n                </span>\n                <span />\n                <span>response = openai.Completion.create(</span>\n                <span>\n                  {\" \"}\n                  model=\n                  <span className=\"text-green-300\">&quot;davinci&quot;</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  prompt=<span className=\"text-amber-300\">&quot;&quot;</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  temperature=<span className=\"text-amber-300\">0.9</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  max_tokens=<span className=\"text-amber-300\">5</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  top_p=<span className=\"text-amber-300\">1</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  frequency_penalty=<span className=\"text-amber-300\">0</span>,\n                </span>\n                <span>\n                  {\" \"}\n                  presence_penalty=<span className=\"text-green-300\">0</span>,\n                </span>\n                <span>)</span>\n              </code>\n            </pre>\n          </div>\n          <div>\n            <p className=\"text-muted-foreground text-sm\">\n              Your API Key can be found here. You should use environment variables or a secret\n              management tool to expose your key to your applications.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\playground\\components\\maxlength-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { SliderProps } from \"@radix-ui/react-slider\";\n\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\n\ninterface MaxLengthSelectorProps {\n  defaultValue: SliderProps[\"defaultValue\"];\n}\n\nexport function MaxLengthSelector({ defaultValue }: MaxLengthSelectorProps) {\n  const [value, setValue] = React.useState(defaultValue);\n\n  return (\n    <div className=\"grid gap-2 pt-2\">\n      <HoverCard openDelay={200}>\n        <HoverCardTrigger asChild>\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"maxlength\">Maximum Length</Label>\n              <span className=\"text-muted-foreground hover:border-border w-12 rounded-md border border-transparent px-2 py-0.5 text-right text-sm\">\n                {value}\n              </span>\n            </div>\n            <Slider\n              id=\"maxlength\"\n              max={4000}\n              defaultValue={value}\n              step={10}\n              onValueChange={setValue}\n              aria-label=\"Maximum Length\"\n            />\n          </div>\n        </HoverCardTrigger>\n        <HoverCardContent align=\"start\" className=\"w-[260px] text-sm\" side=\"left\">\n          The maximum number of tokens to generate. Requests can use up to 2,048 or 4,000 tokens,\n          shared between prompt and completion. The exact limit varies by model.\n        </HoverCardContent>\n      </HoverCard>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\hover-card.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\slider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\playground\\components\\model-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { PopoverProps } from \"@radix-ui/react-popover\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useMutationObserver } from \"@/hooks/use-mutation-observer\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList\n} from \"@/components/ui/command\";\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nimport { Model, ModelType } from \"../data/models\";\n\ninterface ModelSelectorProps extends PopoverProps {\n  types: readonly ModelType[];\n  models: Model[];\n}\n\nexport function ModelSelector({ models, types, ...props }: ModelSelectorProps) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedModel, setSelectedModel] = React.useState<Model>(models[0]);\n  const [peekedModel, setPeekedModel] = React.useState<Model>(models[0]);\n\n  return (\n    <div className=\"grid gap-3\">\n      <HoverCard openDelay={200}>\n        <HoverCardTrigger asChild>\n          <Label htmlFor=\"model\">Model</Label>\n        </HoverCardTrigger>\n        <HoverCardContent align=\"start\" className=\"w-[260px] text-sm\" side=\"left\">\n          The model which will generate the completion. Some models are suitable for natural\n          language tasks, others specialize in code. Learn more.\n        </HoverCardContent>\n      </HoverCard>\n      <Popover open={open} onOpenChange={setOpen} {...props}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            aria-label=\"Select a model\"\n            className=\"w-full justify-between\">\n            {selectedModel ? selectedModel.name : \"Select a model...\"}\n            <ChevronsUpDown className=\"text-muted-foreground\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent align=\"end\" className=\"w-[250px] p-0\">\n          <HoverCard>\n            <HoverCardContent side=\"left\" align=\"start\" forceMount className=\"min-h-[280px]\">\n              <div className=\"grid gap-2\">\n                <h4 className=\"leading-none font-medium\">{peekedModel.name}</h4>\n                <div className=\"text-muted-foreground text-sm\">{peekedModel.description}</div>\n                {peekedModel.strengths ? (\n                  <div className=\"mt-4 grid gap-2\">\n                    <h5 className=\"text-sm leading-none font-medium\">Strengths</h5>\n                    <ul className=\"text-muted-foreground text-sm\">{peekedModel.strengths}</ul>\n                  </div>\n                ) : null}\n              </div>\n            </HoverCardContent>\n            <Command loop>\n              <CommandList className=\"h-(--cmdk-list-height) max-h-[400px]\">\n                <CommandInput placeholder=\"Search Models...\" />\n                <CommandEmpty>No Models found.</CommandEmpty>\n                <HoverCardTrigger />\n                {types.map((type) => (\n                  <CommandGroup key={type} heading={type}>\n                    {models\n                      .filter((model) => model.type === type)\n                      .map((model) => (\n                        <ModelItem\n                          key={model.id}\n                          model={model}\n                          isSelected={selectedModel?.id === model.id}\n                          onPeek={(model) => setPeekedModel(model)}\n                          onSelect={() => {\n                            setSelectedModel(model);\n                            setOpen(false);\n                          }}\n                        />\n                      ))}\n                  </CommandGroup>\n                ))}\n              </CommandList>\n            </Command>\n          </HoverCard>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\ninterface ModelItemProps {\n  model: Model;\n  isSelected: boolean;\n  onSelect: () => void;\n  onPeek: (model: Model) => void;\n}\n\nfunction ModelItem({ model, isSelected, onSelect, onPeek }: ModelItemProps) {\n  const ref = React.useRef<HTMLDivElement>(null);\n\n  useMutationObserver(ref, (mutations) => {\n    mutations.forEach((mutation) => {\n      if (\n        mutation.type === \"attributes\" &&\n        mutation.attributeName === \"aria-selected\" &&\n        ref.current?.getAttribute(\"aria-selected\") === \"true\"\n      ) {\n        onPeek(model);\n      }\n    });\n  });\n\n  return (\n    <CommandItem\n      key={model.id}\n      onSelect={onSelect}\n      ref={ref}\n      className=\"data-[selected=true]:bg-primary data-[selected=true]:text-primary-foreground\">\n      {model.name}\n      <Check className={cn(\"ml-auto\", isSelected ? \"opacity-100\" : \"opacity-0\")} />\n    </CommandItem>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "hooks\\use-mutation-observer.ts",
      "content": "import * as React from \"react\";\n\nexport const useMutationObserver = (\n  ref: React.MutableRefObject<HTMLElement | null>,\n  callback: MutationCallback,\n  options = {\n    attributes: true,\n    characterData: true,\n    childList: true,\n    subtree: true\n  }\n) => {\n  React.useEffect(() => {\n    if (ref.current) {\n      const observer = new MutationObserver(callback);\n      observer.observe(ref.current, options);\n      return () => observer.disconnect();\n    }\n  }, [ref, callback, options]);\n};\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "components\\ui\\command.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { SearchIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn(\"overflow-hidden p-0\", className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\popover.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\playground\\data\\models.ts",
      "content": "export const types = [\"GPT-3\", \"Codex\"] as const\r\n\r\nexport type ModelType = (typeof types)[number]\r\n\r\nexport interface Model<Type = string> {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  strengths?: string\r\n  type: Type\r\n}\r\n\r\nexport const models: Model<ModelType>[] = [\r\n  {\r\n    id: \"c305f976-8e38-42b1-9fb7-d21b2e34f0da\",\r\n    name: \"text-davinci-003\",\r\n    description:\r\n      \"Most capable GPT-3 model. Can do any task the other models can do, often with higher quality, longer output and better instruction-following. Also supports inserting completions within text.\",\r\n    type: \"GPT-3\",\r\n    strengths:\r\n      \"Complex intent, cause and effect, creative generation, search, summarization for audience\",\r\n  },\r\n  {\r\n    id: \"464a47c3-7ab5-44d7-b669-f9cb5a9e8465\",\r\n    name: \"text-curie-001\",\r\n    description: \"Very capable, but faster and lower cost than Davinci.\",\r\n    type: \"GPT-3\",\r\n    strengths:\r\n      \"Language translation, complex classification, sentiment, summarization\",\r\n  },\r\n  {\r\n    id: \"ac0797b0-7e31-43b6-a494-da7e2ab43445\",\r\n    name: \"text-babbage-001\",\r\n    description: \"Capable of straightforward tasks, very fast, and lower cost.\",\r\n    type: \"GPT-3\",\r\n    strengths: \"Moderate classification, semantic search\",\r\n  },\r\n  {\r\n    id: \"be638fb1-973b-4471-a49c-290325085802\",\r\n    name: \"text-ada-001\",\r\n    description:\r\n      \"Capable of very simple tasks, usually the fastest model in the GPT-3 series, and lowest cost.\",\r\n    type: \"GPT-3\",\r\n    strengths:\r\n      \"Parsing text, simple classification, address correction, keywords\",\r\n  },\r\n  {\r\n    id: \"b43c0ea9-5ad4-456a-ae29-26cd77b6d0fb\",\r\n    name: \"code-davinci-002\",\r\n    description:\r\n      \"Most capable Codex model. Particularly good at translating natural language to code. In addition to completing code, also supports inserting completions within code.\",\r\n    type: \"Codex\",\r\n  },\r\n  {\r\n    id: \"bbd57291-4622-4a21-9eed-dd6bd786fdd1\",\r\n    name: \"code-cushman-001\",\r\n    description:\r\n      \"Almost as capable as Davinci Codex, but slightly faster. This speed advantage may make it preferable for real-time applications.\",\r\n    type: \"Codex\",\r\n    strengths: \"Real-time application where low-latency is preferable\",\r\n  },\r\n]\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\playground\\components\\preset-actions.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Dialog } from \"@radix-ui/react-dialog\";\nimport { MoreHorizontal } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nimport {\n  AlertDialog,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle\n} from \"@/components/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@/components/ui/dropdown-menu\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\n\nexport function PresetActions() {\n  const [open, setIsOpen] = React.useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = React.useState(false);\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"secondary\" size=\"icon\">\n            <span className=\"sr-only\">Actions</span>\n            <MoreHorizontal />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onSelect={() => setIsOpen(true)}>\n            Content filter preferences\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onSelect={() => setShowDeleteDialog(true)} className=\"text-red-600\">\n            Delete preset\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n      <Dialog open={open} onOpenChange={setIsOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Content filter preferences</DialogTitle>\n            <DialogDescription>\n              The content filter flags text that may violate our content policy. It&apos;s powered\n              by our moderation endpoint which is free to use to moderate your OpenAI API traffic.\n              Learn more.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-6\">\n            <h4 className=\"text-muted-foreground text-sm\">Playground Warnings</h4>\n            <div className=\"flex items-start justify-between gap-4 pt-3\">\n              <Switch name=\"show\" id=\"show\" defaultChecked={true} />\n              <Label className=\"grid gap-1 font-normal\" htmlFor=\"show\">\n                <span className=\"font-semibold\">Show a warning when content is flagged</span>\n                <span className=\"text-muted-foreground text-sm\">\n                  A warning will be shown when sexual, hateful, violent or self-harm content is\n                  detected.\n                </span>\n              </Label>\n            </div>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button variant=\"secondary\">Close</Button>\n            </DialogClose>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This preset will no longer be accessible by you or\n              others you&apos;ve shared it with.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <Button\n              variant=\"destructive\"\n              onClick={() => {\n                setShowDeleteDialog(false);\n                toast.success(\"This preset has been deleted.\");\n              }}>\n              Delete\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\alert-dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\switch.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n        )}\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\playground\\components\\preset-save.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport function PresetSave() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"secondary\">Save</Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Save preset</DialogTitle>\n          <DialogDescription>\n            This will save the current playground state as a preset which you can access later or\n            share with others.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-6 py-4\">\n          <div className=\"grid gap-3\">\n            <Label htmlFor=\"name\">Name</Label>\n            <Input id=\"name\" autoFocus />\n          </div>\n          <div className=\"grid gap-3\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea id=\"description\" />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button type=\"submit\">Save</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\textarea.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "examples\\playground\\components\\preset-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { PopoverProps } from \"@radix-ui/react-popover\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator\n} from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nimport { Preset } from \"../data/presets\";\n\ninterface PresetSelectorProps extends PopoverProps {\n  presets: Preset[];\n}\n\nexport function PresetSelector({ presets, ...props }: PresetSelectorProps) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedPreset, setSelectedPreset] = React.useState<Preset>();\n\n  return (\n    <Popover open={open} onOpenChange={setOpen} {...props}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-label=\"Load a preset...\"\n          aria-expanded={open}\n          className=\"flex-1 justify-between md:max-w-[200px] lg:max-w-[300px]\">\n          {selectedPreset ? selectedPreset.name : \"Load a preset...\"}\n          <ChevronsUpDown className=\"opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search presets...\" />\n          <CommandList>\n            <CommandEmpty>No presets found.</CommandEmpty>\n            <CommandGroup heading=\"Examples\">\n              {presets.map((preset) => (\n                <CommandItem\n                  key={preset.id}\n                  onSelect={() => {\n                    setSelectedPreset(preset);\n                    setOpen(false);\n                  }}>\n                  {preset.name}\n                  <Check\n                    className={cn(\n                      \"ml-auto\",\n                      selectedPreset?.id === preset.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n            <CommandSeparator />\n            <CommandGroup>\n              <CommandItem>More examples</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\playground\\data\\presets.ts",
      "content": "export interface Preset {\r\n  id: string\r\n  name: string\r\n}\r\n\r\nexport const presets: Preset[] = [\r\n  {\r\n    id: \"9cb0e66a-9937-465d-a188-2c4c4ae2401f\",\r\n    name: \"Grammatical Standard English\",\r\n  },\r\n  {\r\n    id: \"61eb0e32-2391-4cd3-adc3-66efe09bc0b7\",\r\n    name: \"Summarize for a 2nd grader\",\r\n  },\r\n  {\r\n    id: \"a4e1fa51-f4ce-4e45-892c-224030a00bdd\",\r\n    name: \"Text to command\",\r\n  },\r\n  {\r\n    id: \"cc198b13-4933-43aa-977e-dcd95fa30770\",\r\n    name: \"Q&A\",\r\n  },\r\n  {\r\n    id: \"adfa95be-a575-45fd-a9ef-ea45386c64de\",\r\n    name: \"English to other languages\",\r\n  },\r\n  {\r\n    id: \"c569a06a-0bd6-43a7-adf9-bf68c09e7a79\",\r\n    name: \"Parse unstructured data\",\r\n  },\r\n  {\r\n    id: \"15ccc0d7-f37a-4f0a-8163-a37e162877dc\",\r\n    name: \"Classification\",\r\n  },\r\n  {\r\n    id: \"4641ef41-1c0f-421d-b4b2-70fe431081f3\",\r\n    name: \"Natural language to Python\",\r\n  },\r\n  {\r\n    id: \"48d34082-72f3-4a1b-a14d-f15aca4f57a0\",\r\n    name: \"Explain code\",\r\n  },\r\n  {\r\n    id: \"dfd42fd5-0394-4810-92c6-cc907d3bfd1a\",\r\n    name: \"Chat\",\r\n  },\r\n]\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\playground\\components\\preset-share.tsx",
      "content": "import { Copy } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nexport function PresetShare() {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"secondary\">Share</Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"end\" className=\"flex w-[520px] flex-col gap-4\">\n        <div className=\"flex flex-col gap-1 text-center sm:text-left\">\n          <h3 className=\"text-lg font-semibold\">Share preset</h3>\n          <p className=\"text-muted-foreground text-sm\">\n            Anyone who has this link and an OpenAI account will be able to view this.\n          </p>\n        </div>\n        <div className=\"relative flex-1\">\n          <Label htmlFor=\"link\" className=\"sr-only\">\n            Link\n          </Label>\n          <Input\n            id=\"link\"\n            defaultValue=\"https://platform.openai.com/playground/p/7bbKYQvsVkNmVb8NGcdUOLae?model=text-davinci-003\"\n            readOnly\n            className=\"h-9 pr-10\"\n          />\n          <Button\n            type=\"submit\"\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"absolute top-1 right-1 size-7\">\n            <span className=\"sr-only\">Copy</span>\n            <Copy className=\"size-3.5\" />\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\playground\\components\\temperature-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { SliderProps } from \"@radix-ui/react-slider\";\n\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\n\ninterface TemperatureSelectorProps {\n  defaultValue: SliderProps[\"defaultValue\"];\n}\n\nexport function TemperatureSelector({ defaultValue }: TemperatureSelectorProps) {\n  const [value, setValue] = React.useState(defaultValue);\n\n  return (\n    <div className=\"grid gap-2 pt-2\">\n      <HoverCard openDelay={200}>\n        <HoverCardTrigger asChild>\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"temperature\">Temperature</Label>\n              <span className=\"text-muted-foreground hover:border-border w-12 rounded-md border border-transparent px-2 py-0.5 text-right text-sm\">\n                {value}\n              </span>\n            </div>\n            <Slider\n              id=\"temperature\"\n              max={1}\n              defaultValue={value}\n              step={0.1}\n              onValueChange={setValue}\n              aria-label=\"Temperature\"\n            />\n          </div>\n        </HoverCardTrigger>\n        <HoverCardContent align=\"start\" className=\"w-[260px] text-sm\" side=\"left\">\n          Controls randomness: lowering results in less random completions. As the temperature\n          approaches zero, the model will become deterministic and repetitive.\n        </HoverCardContent>\n      </HoverCard>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\playground\\components\\top-p-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { SliderProps } from \"@radix-ui/react-slider\";\n\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\n\ninterface TopPSelectorProps {\n  defaultValue: SliderProps[\"defaultValue\"];\n}\n\nexport function TopPSelector({ defaultValue }: TopPSelectorProps) {\n  const [value, setValue] = React.useState(defaultValue);\n\n  return (\n    <div className=\"grid gap-2 pt-2\">\n      <HoverCard openDelay={200}>\n        <HoverCardTrigger asChild>\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"top-p\">Top P</Label>\n              <span className=\"text-muted-foreground hover:border-border w-12 rounded-md border border-transparent px-2 py-0.5 text-right text-sm\">\n                {value}\n              </span>\n            </div>\n            <Slider\n              id=\"top-p\"\n              max={1}\n              defaultValue={value}\n              step={0.1}\n              onValueChange={setValue}\n              aria-label=\"Top P\"\n            />\n          </div>\n        </HoverCardTrigger>\n        <HoverCardContent align=\"start\" className=\"w-[260px] text-sm\" side=\"left\">\n          Control diversity via nucleus sampling: 0.5 means half of all likelihood-weighted options\n          are considered.\n        </HoverCardContent>\n      </HoverCard>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "examples\\playground\\page.tsx",
      "content": "import { RotateCcw } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nimport { CodeViewer } from \"./components/code-viewer\";\nimport { MaxLengthSelector } from \"./components/maxlength-selector\";\nimport { ModelSelector } from \"./components/model-selector\";\nimport { PresetActions } from \"./components/preset-actions\";\nimport { PresetSave } from \"./components/preset-save\";\nimport { PresetSelector } from \"./components/preset-selector\";\nimport { PresetShare } from \"./components/preset-share\";\nimport { TemperatureSelector } from \"./components/temperature-selector\";\nimport { TopPSelector } from \"./components/top-p-selector\";\nimport { models, types } from \"./data/models\";\nimport { presets } from \"./data/presets\";\n\nexport default function PlaygroundPage() {\n  return (\n    <div>\n      <div className=\"flex flex-col items-start justify-between gap-2 p-4 py-4 sm:flex-row sm:items-center sm:gap-0 md:h-16\">\n        <h2 className=\"text-lg font-semibold\">Playground</h2>\n        <div className=\"ml-auto flex w-full gap-2 sm:justify-end\">\n          <PresetSelector presets={presets} />\n          <PresetSave />\n          <div className=\"hidden gap-2 md:flex\">\n            <CodeViewer />\n            <PresetShare />\n          </div>\n          <PresetActions />\n        </div>\n      </div>\n      <Separator />\n      <Tabs defaultValue=\"complete\" className=\"flex h-[calc(100vh-4.5rem)] flex-1 flex-col\">\n        <div className=\"flex flex-1 flex-col p-4\">\n          <div className=\"grid flex-1 items-stretch gap-6 md:grid-cols-[1fr_200px]\">\n            <div className=\"hidden flex-col gap-6 sm:flex md:order-2\">\n              <div className=\"grid gap-3\">\n                <HoverCard openDelay={200}>\n                  <HoverCardTrigger asChild>\n                    <span className=\"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                      Mode\n                    </span>\n                  </HoverCardTrigger>\n                  <HoverCardContent className=\"w-[320px] text-sm\" side=\"left\">\n                    Choose the interface that best suits your task. You can provide: a simple prompt\n                    to complete, starting and ending text to insert a completion within, or some\n                    text with instructions to edit it.\n                  </HoverCardContent>\n                </HoverCard>\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"complete\">\n                    <span className=\"sr-only\">Complete</span>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"none\">\n                      <rect x=\"4\" y=\"3\" width=\"12\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"7\" width=\"12\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"8.5\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"8.5\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"13\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                    </svg>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"insert\">\n                    <span className=\"sr-only\">Insert</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      className=\"h-5 w-5\">\n                      <path\n                        fillRule=\"evenodd\"\n                        clipRule=\"evenodd\"\n                        d=\"M14.491 7.769a.888.888 0 0 1 .287.648.888.888 0 0 1-.287.648l-3.916 3.667a1.013 1.013 0 0 1-.692.268c-.26 0-.509-.097-.692-.268L5.275 9.065A.886.886 0 0 1 5 8.42a.889.889 0 0 1 .287-.64c.181-.17.427-.267.683-.269.257-.002.504.09.69.258L8.903 9.87V3.917c0-.243.103-.477.287-.649.183-.171.432-.268.692-.268.26 0 .509.097.692.268a.888.888 0 0 1 .287.649V9.87l2.245-2.102c.183-.172.432-.269.692-.269.26 0 .508.097.692.269Z\"\n                        fill=\"currentColor\"></path>\n                      <rect x=\"4\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"8.5\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"13\" y=\"15\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                    </svg>\n                  </TabsTrigger>\n                  <TabsTrigger value=\"edit\">\n                    <span className=\"sr-only\">Edit</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"none\"\n                      className=\"h-5 w-5\">\n                      <rect x=\"4\" y=\"3\" width=\"12\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"7\" width=\"12\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"4\" y=\"15\" width=\"4\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <rect x=\"8.5\" y=\"11\" width=\"3\" height=\"2\" rx=\"1\" fill=\"currentColor\"></rect>\n                      <path\n                        d=\"M17.154 11.346a1.182 1.182 0 0 0-1.671 0L11 15.829V17.5h1.671l4.483-4.483a1.182 1.182 0 0 0 0-1.671Z\"\n                        fill=\"currentColor\"></path>\n                    </svg>\n                  </TabsTrigger>\n                </TabsList>\n              </div>\n              <ModelSelector types={types} models={models} />\n              <TemperatureSelector defaultValue={[0.56]} />\n              <MaxLengthSelector defaultValue={[256]} />\n              <TopPSelector defaultValue={[0.9]} />\n            </div>\n            <div className=\"flex flex-1 flex-col *:data-[slot=tab-content]:flex-1 md:order-1\">\n              <TabsContent value=\"complete\" className=\"mt-0 border-0 p-0\">\n                <div className=\"flex h-full flex-col gap-4\">\n                  <Textarea\n                    placeholder=\"Write a tagline for an ice cream shop\"\n                    className=\"flex-1 p-4\"\n                  />\n                  <div className=\"flex items-center gap-2\">\n                    <Button>Submit</Button>\n                    <Button variant=\"secondary\">\n                      <span className=\"sr-only\">Show history</span>\n                      <RotateCcw />\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n              <TabsContent value=\"insert\" className=\"mt-0 flex flex-col gap-4 border-0 p-0\">\n                <div className=\"grid h-full grid-rows-2 gap-6 lg:grid-cols-2 lg:grid-rows-1\">\n                  <Textarea\n                    placeholder=\"We're writing to [inset]. Congrats from OpenAI!\"\n                    className=\"h-full p-4\"\n                  />\n                  <div className=\"bg-muted rounded-md border\"></div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button>Submit</Button>\n                  <Button variant=\"secondary\">\n                    <span className=\"sr-only\">Show history</span>\n                    <RotateCcw />\n                  </Button>\n                </div>\n              </TabsContent>\n              <TabsContent value=\"edit\" className=\"mt-0 flex flex-col gap-4 border-0 p-0\">\n                <div className=\"grid h-full gap-6 lg:grid-cols-2\">\n                  <div className=\"flex flex-col gap-4\">\n                    <div className=\"flex flex-1 flex-col gap-2\">\n                      <Label htmlFor=\"input\" className=\"sr-only\">\n                        Input\n                      </Label>\n                      <Textarea\n                        id=\"input\"\n                        placeholder=\"We is going to the market.\"\n                        className=\"flex-1 p-4\"\n                      />\n                    </div>\n                    <div className=\"flex flex-col gap-2\">\n                      <Label htmlFor=\"instructions\">Instructions</Label>\n                      <Textarea id=\"instructions\" placeholder=\"Fix the grammar.\" />\n                    </div>\n                  </div>\n                  <div className=\"bg-muted rounded-md border\" />\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button>Submit</Button>\n                  <Button variant=\"secondary\">\n                    <span className=\"sr-only\">Show history</span>\n                    <RotateCcw />\n                  </Button>\n                </div>\n              </TabsContent>\n            </div>\n          </div>\n        </div>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "components\\ui\\separator.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}